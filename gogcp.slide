Go on GCP (Google Cloud Platform)
May 2018, Singapore

Issac Trotts
SWE on Google App Engine runtimes team
issactrotts@google.com
go-nuts@google.com

* May the gopher be with you.
.image gopher.png 

* Reference
[[https://godoc.org/cloud.google.com/go]]

* Sticky notes
I'd like to know when everyone's done with each step.
Please attach a sticky note to your laptop when you're done.

* Make a project
Go to console.cloud.google.com.
Make a project (suggestion: "go", henceforth ${PROJECT?}).
Once it finishes, go to APIs | Credentials.
Click the blue "Create credentials" button, then choose "Service account key".
Pick "Compute engine default service account" from the Service account menu.
Open the downloaded JSON file and paste its contents to a new file: 

	export GOOGLE_APPLICATION_CREDENTIALS=$HOME/gogcp-creds.json
	cat >$GOOGLE_APPLICATION_CREDENTIALS  # hit enter, then paste

* Start Cloud Shell
Click the Cloud Shell icon (>_) at the top right.
The Cloud Shell is already running `tmux`.
Try it by hitting ctrl-b % to split vertically (ctrl-d to close it).
Make new tabs with `+` and rename them with ctrl-comma.
Go, Git and Vim are already installed.
There's a Cloud Editor that you can launch with the pencil icon.
Cloud Shell enables development from a Chromebook.

* Try installing and running a Go web app
        go get golang.org/x/tools/cmd/present
        present -http localhost:8080

Preview it with the eyeball icon to the right of the pencil.

* Grab the samples

	go get -u -d github.com/GoogleCloudPlatform/golang-samples
	# -u means update it if it's already downloaded
	# -d means don't build anything yet

* GAE (Google App Engine) standard
Create a simple web-server in Go to serve a static page.

	cd ~/gopath/src/github.com/GoogleCloudPlatform/golang-samples/appengine/helloworld
	$EDITOR main.go   # similar to a plain Go web app, but different
	$EDITOR app.yaml

Try it out locally:

	dev_appserver.py app.yaml
	# Visit localhost:8080 in a browser.

Deploy it:

	gcloud config set project ${PROJECT?}
	gcloud app deploy .

* GAE flex
Create a simple web-server in Go to serve a static page.

	cd ~/gopath/src/github.com/GoogleCloudPlatform/golang-samples/appengine_flexible/helloworld 
	$EDITOR main.go   # just a plain Go web app (portable!)
	$EDITOR app.yaml  # stuff to compensate for Flex's lack of scaling to zero :|

Try it out locally:

	go get  # builds the web app and installs it to $GOPATH/bin/helloworld
	~/gopath/bin/helloworld
	# Open web browser on localhost:8080.

Enable billing.

Deploy it:

	gcloud app deploy  # 13.5m

* GKE (Google Kubernetes Engine) part 1: make an app image (20m)
[[https://cloud.google.com/kubernetes-engine/docs/quickstart]]

	mkdir -p ~/gopath/src/${PROJECT?}/gkedemo
	cd 	 ~/gopath/src/${PROJECT?}/gkedemo
	cat >Dockerfile # paste contents of Dockerfile at bottom of the quickstart
	cat >main.go    # past contents of main.go
	docker build -t gcr.io/${PROJECT?}/gkedemo .
	gcloud auth configure-docker
	docker tag gkedemo gcr.io/${PROJECT?}/gkedemo
	gcloud docker -- push gcr.io/${PROJECT?}/gkedemo

* GKE part 2: make a cluster and deploy the app
[[https://cloud.google.com/kubernetes-engine/docs/quickstart]]

	gcloud config set compute/zone us-west1-a
	CLUSTER=c1
	gcloud container clusters create ${CLUSTER?}
	gcloud container clusters get-credentials ${CLUSTER?}
	kubectl run hello-server --image gcr.io/${PROJECT?}/gkedemo --port 8080
	kubectl expose deployment hello-server --type "LoadBalancer"
	kubectl get service hello-server
	
Copy the IP address from the EXTERNAL-IP column and visit it on port 8080.

Clean up:

	kubectl delete service hello-server
	kubectl delete deployment hello-server
	gcloud container clusters delete ${CLUSTER?}

* GCE (Google Compute Engine) (30m)
Follow the tutorial at [[https://cloud.google.com/go/tutorials/bookshelf-on-compute-engine]]
up to the point where you see your bookshelf running.

Fixes for the `instances create` call:
1. Add `--metadata app-location=$BOOKSHELF_DEPLOY_LOCATION`
2. Change `gce/startup-script.sh` to `gce_deployment/startup-script.sh`.

After playing with the app, delete it like this:

	gcloud compute instances create my-app-instance

* Hands-on GCP API exercises
`https://cloud.google.com/go/home`
Let's do each one, about 15 minutes each.

* Storage API (GCS) part 1: make a bucket (10m)
`https://cloud.google.com/go/home`

	mkdir -p ~/gopath/src/gogcp/gcs_mkbucket
	cd ~/gopath/src/gogcp/gcs_mkbucket
	cat >main.go  # paste from web

Edit `main.go` to use your project ID and change the bucket name to something
unique.

	go get       # builds the app, saves it as ~/gopath/bin/gcs_mkbucket
	gcs_mkbucket # runs the app

* Storage API (GCS) part 2: upload a file (10m)

	cd ~/gopath/src/github.com/GoogleCloudPlatform/golang-samples/storage/gcsupload
	go get

Try uploading a file to the bucket you made:

	export GOLANG_SAMPLES_BUCKET=[your bucket]
	export GOLANG_SAMPLES_PROJECT_ID=[your project]
	gcsupload < gcsupload.go  # for example

Open the URL it prints out to see the uploaded file.

	$EDITOR gcsupload.go

* Storage API (GCS) part 3: download a file (10m)

	cd ~/gopath/src/github.com/GoogleCloudPlatform/golang-samples/storage/objects
	$ EDITOR main.go
	go get
	export GOOGLE_CLOUD_PROJECT=go-on-gcp-101
	objects -o=[your bucket]:test-sample read  # prints out the file you uploaded

* Bigquery API

Run a query over StackOverflow questions:
	cd ~/gopath/src/github.com/GoogleCloudPlatform/golang-samples/bigquery/simpleapp
	$EDITOR simpleapp.go
	go get
	simpleapp  

Homework:
	Create a data Dataset, and create a table.
	Populate the table with some data.
	Query your newly created Table.

* PubSub API

Make a new topic and publish a message to it:
	cd ~/gopath/src/github.com/GoogleCloudPlatform/golang-samples/pubsub/topics
	$EDITOR main.go
	go get
	topics

Subscribe to the topic:
	cd ~/gopath/src/github.com/GoogleCloudPlatform/golang-samples/pubsub/subscriptions
	$EDITOR main.go
	go get
	subscriptions

* Translation API

	cd ~/gopath/src/github.com/GoogleCloudPlatform/golang-samples/translate
	$EDITOR main.go
	go get
	translate_quickstart

Exercise (15m): convert this into a tool that translates a string on the
command line to a language of the user's choosing.

* Vision API
Enable the Vision API in the Cloud Console.

	cd ~/gopath/src/github.com/GoogleCloudPlatform/golang-samples/vision/vision_quickstart
	$EDITOR main.go
	go get
	vision_quickstart

* Datastore
	cd ~/gopath/src/github.com/GoogleCloudPlatform/golang-samples/datastore/tasks
	$EDITOR tasks.go
	go get
	export DATASTORE_PROJECT_ID=[YOUR PROJECT ID]
	tasks

* Speech
Upload a small Audio-file to Speech-API and print out the translated Text.

* Vision
Post an image to the Vision API and print the output of labels found.

* NLP
Upload a paragraph of text to the NLP API, and echo Sentiment and other information returned from the NLP API.

* Spanner
Create a new table.
Create rows in an existing table.
Run a read-only query.

